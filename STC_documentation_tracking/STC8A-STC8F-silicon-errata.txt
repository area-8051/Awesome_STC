Questions about STC8A series chip ADC

For STC8A series chips, when the user uses the ADC_CONTR.7 (ADC_POWER) 
register to turn on the power of the ADC module, the ADC module will 
force the I/O port corresponding to ADC_CHS in the ADC_CONTR register 
to be set to high-impedance input mode and close this port on the 
digital input channel.

For example: after the "ADC_CONTR = 0x80" statement is executed in the 
user software, when the power of the ADC module is turned on, the port 
P1.0 corresponding to channel 0 of the ADC will also be forced to be 
set to high-impedance input mode, and P1 will be turned off, including 
the digital level input and output of P1.0 port, the output of PWM0 and 
the input of serial port 2, so the P1.0 port will not be able to receive 
the data of serial port 2 at this time, nor can it output PWM waveform.

The I/O ports corresponding to the 15-channel ADC of the STC8A series 
microcontrollers have multiple multiplexed digital functions, so in 
order to avoid turning on the ADC power and affecting the digital 
functions of irrelevant I/Os, when setting the ADC_CONTR register in 
the software, be sure to set ADC_POWER and ADC_CHS at the same time. 
For example, if the user system needs to use the P1.5 port for ADC 
conversion, please use the "ADC_CONTR = 0x85" statement to initialize 
ADC_CONTR directly.

Summary of problems with STC8A/8F series chips

1. When the reset pin is used for reset, the pull-down resistor should 
not be greater than 3K. At 1.5V, there is a pull-up current of more 
than 200uA, and the 10K circuit cannot pull it low.

2. When 4 serial ports use 9-bit data, TB8 needs to be installed twice.
(STC8A8K series G version chips do not have this problem, STC8A4K series 
G version chips do not have this problem, STC8F2K series E version chips 
do not have this problem)

3. When using ADC, pay attention to the following requirements: the 
voltage difference between AVCC and VCC should not exceed 0.1V, VREF 
should be between 2.0~AVCC, and the voltage of P1.0~P1.7 P0.0~P0.6 
should not be higher than AVCC.

4. When using an external crystal oscillator, pay attention to the 
following requirements: The voltage difference between AVCC and VCC 
should not exceed 0.1V, and the voltages of P1.0~P1.7 and P0.0~P0.6 
should not be higher than AVCC, otherwise the crystal oscillator will 
not vibrate, and the same crash.

5. All serial port sending pins of STC8A/8F series cannot be set to 
open-drain mode, otherwise the serial port data cannot be output.

6. The sending pins TXDn of the 4 serial ports need to choose one of 
the following three:
	A. Set as push-pull output,
	B. Allow the internal pull-up 3K7 resistor,
	C. Add a 3K~5.1K pull-up resistor.
(STC8A8K series G version chips do not have this problem, STC8A4K series 
G version chips do not have this problem, STC8F2K series E version chips 
do not have this problem)

7. If SCLK and MOSI of SPI are set as open-drain output and IO output is 
high, SCLK and MOSI have no output signal, but if these two ports are 
output low level, they can be output normally. And, these two signals 
are push-pull outputs, independent of IO settings.

8. 8-channel enhanced PWM output, switch to P1.0~P1.7 or P2.0~P2.7, IO 
is set to quasi-bidirectional port or push-pull output, PWM output is 
normal, both are push-pull output, and Direct operation of IO will not 
affect the PWM waveform. However, if the IO is set as an open-drain 
output (allowing internal pull-up resistors or external pull-up 
resistors), if the corresponding IO outputs a high level, the PWM has 
no output (IO is high resistance), and the corresponding IO outputs a 
low level, PWM has push-pull output.

9. When the 4-channel PCA works in PWM, switch to P1.4~P1.7 or P2.3~P2.6 
or P3.3~P3.0, the situation is similar to the above, IO is set as 
quasi-bidirectional port or push-pull output, PWM output is normal, 
both are push-pull output, and direct operation of IO will not affect 
the PWM waveform. However, if the IO is set as an open-drain output 
(allowing internal pull-up resistors or external pull-up resistors), 
if the corresponding IO outputs a high level, the PWM has no output (IO 
is high resistance), and the corresponding IO outputs a low level.

10. When the 4-channel PCA works in high-speed output, it is affected 
by the other IO inversion of the same port. For example, PCA3 outputs 
high-speed pulses from P2.6, and the change of any P2 port except P2.6 
will affect P2.6. waveform, even if IO is set to high impedance.

11. Timer 0 high-speed output from P3.5, timer 1 high-speed output from 
P3.4, timer 2 high-speed output from P1.3, timer 3 high-speed output 
from P0.5, timer 4 high-speed output from P0.7 Output, these IOs are 
set as quasi-bidirectional ports or push-pull output, the pulse output 
is normal, all are push-pull output, and direct operation of IO will 
not affect the output waveform. But if the IO is set as an open-drain 
output (allowing internal pull-up resistors or external pull-up 
resistors), if the corresponding IO outputs a high level, there is no 
output (IO is high impedance), while the corresponding IO output is 
low, and the waveform has a push-pull output.

Important note on closing the EA with the CLR instruction

For STC8 series MCUs, in order to speed up the execution of instructions, 
the chip uses a 4-stage pipelined instruction fetch-decode-execution 
parallel system for instructions, so that instructions that originally 
took 12 to 48 clock cycles to complete, in STC8 Except for MUL, DIV, DA, 
MOVC, MOVX and jump instructions in the series of MCUs, all other 
instructions can be completed in only one clock cycle. Note that the 
completion mentioned here is not the real execution completion, but at 
this clock After the decoding of the current instruction is completed 
within the cycle, the action of the previous instruction is executed 
while the decoding operation of the next instruction is performed in the 
next clock cycle. The advantage of this operation is that the execution 
speed of the instruction is indeed accelerated on a macro level, but the 
negative impact is that there is a clock hysteresis for the execution 
effect of some instructions.

The hysteresis described earlier will not be a problem for 8051 program 
code based on the von Reumann architecture, because the instructions do 
not appear concurrent, but due to the interrupt mechanism in the 8051 
code, interrupts may be interrupted at any time. The code executed in 
the current sequence, the hysteresis described above may cause problems, 
so the general practice is that when the variable that needs to be 
modified in the main loop may have an access conflict with the 
interrupt or the variable that needs to be modified in the main loop 
is interrupted When logic judgment is needed in the main loop, it is 
necessary to use the CLR EA instruction to temporarily close the 
interrupt before modifying this variable in the main loop, and then use 
the SETB EA instruction to open the interrupt after the modification of 
the variable is completed, so as to achieve the main loop and the 
purpose of interrupting mutually exclusive access to variables.

Note: The CLR EA instruction itself also has hysteresis, that is, after 
CLR EA, EA is not closed immediately, but needs to wait for the next 
clock cycle to complete before EA is closed, that is, after running 
CLR EA, it is necessary to execute one more statement before the EA is 
actually closed. Therefore, the correct way to write the program code 
is to add 1~2 NOP instructions after the CLR EA instruction, because 
the execution of NOP will not affect any arithmetic logic operation and 
logic judgment.

The correct assembly code to close the EA is as follows:

	...
	NOP
	CLR EA
	NOP
	...
	NOP
	SETB EA
	NOP
	...

The correct C code to close the EA is as follows:

	...
	_nop_();
	EA = 0;
	_nop_();
	...
	_nop_();
	EA = 1;
	_nop_();
	...

In addition, for the STC15 series MCU, it is also necessary to pay 
attention to this problem. Since the internal hardware of the STC15 
series also uses a 4-stage pipeline system, there will be problems 
similar to the above. Therefore, the general correct practice also 
needs to refer to the above sample code to write the program.

Important Notes on EEPROM Program and Erase Latency

(comporte des tableaux, Ã  faire sous LibreOffice. Pages 830-831)

STC8F2K64S4 Series

(je m'en fiche)

STC8F2K64S2 Series

(je m'en fiche aussi)

STC8A8K64S4A12 series

Important Notes for STC8A8K64S4A12 Series G Version Chips 1

Fixed the following issues with I2C in Revision F chips:

a. Use the STC8A8K64S4A12 series G version chip as the slave, when the 
slave address does not match the local machine, the MCU will not return 
an acknowledgment signal (F version chip will return ACK incorrectly)

b. Use the STC8A8K64S4A12 series G version chip as the slave, when the 
host completes reading the data and gives a NAK response signal, the 
MCU will not send the next data bit to the SDA bus (for the F version 
chip, no matter the host returns ACK or NAK, MCU will wrongly send the 
next data bit to the SDA bus)

c. Using the STC8A8K64S4A12 series G version chip as the host, when an 
interference signal is generated on the I2C bus, the I2C communication 
will be interrupted. At this time, you only need to turn off the I2C 
total enable bit ENI2C (bit7 of the I2CCFG register), and then turn it 
on again. The I2C host can return to normal working state (when this 
happens, the F version chip must be re-powered on the MCU before it can 
be used)

STC8A8K64S4A12 series G version chip important note 2 

Fixed the problem that when setting the ninth bit (TB8) of the 
transmitted data, when setting the ninth bit (TB8) of the transmitted 
data, it needs to be set twice in succession when the F version chip 
is about serial port 1 mode 2 and mode 3, G version The chip only needs 
to be set up once.

Important Instructions for STC8A8K64S4A12 Series G Version Chips 3

Fixed the problem that the following serial ports need to add pull-up 
resistors or set to strong push-pull mode when sending data. The 
following serial port sending pins of the G version chip do not need 
additional processing when sending data:

	a. TXD(P3.1), TXD_3(P1.7)
	b. TXD2(P1.1), TXD2_2(P4.2)
	c. Note: There are still TXD_2(P3.7), TXD_4(P4.4), TXD3(P0.1), 
	TXD3_2(P5.1), TXD4(P0.3) and TXD4_2(P5.3) as When the serial port 
	sends data, a pull-up resistor needs to be added or it needs to be 
	set to push-pull mode

The interrupt request flag bit of the enhanced PWM is modified as 
follows: when an interrupt request occurs, the hardware automatically 
writes 1 to set the interrupt request flag, and the user can only 
write 0 to clear the interrupt request flag (the user program cannot 
write 1 to set the interrupt request flag. When the user writes 1, 
the interrupt request flag is set. considered invalid).

Important Notes for STC8A8K64S4A12 Series F Version Chips 1

When the serial port sending end of all serial ports (including serial 
port 1, serial port 2, serial port 3, and serial port 4) sends serial 
port data, the sending port needs to perform the following settings: 
(Choose one of the three methods)

	a. Set the I/O port to quasi-bidirectional port mode and turn on 
	the internal pull-up resistor
	b. Set the I/O port to quasi-bidirectional port mode and connect 
	an external 3~10K pull-up resistor
	c. Set the I/O port to strong push-pull mode

STC8A8K64S4A12 series F chip important instructions 2

In mode 2 and mode 3 of serial port 1, when setting the ninth bit (TB8) 
of the transmitted data, it needs to be set twice to be effective. 
Serial port 2, serial port 3 and serial port 4 do not have this problem.

STC8A4K64S2A12 series

Important Notes for STC8A4K64S2A12 Series G Version Chips 1

Fixed the following issues with I2C in Revision F chips:

a. Use the STC8A4K64S2A12 series G version chip as the slave, when the 
slave address does not match the local machine, the MCU will not return 
a response signal (F version chip will return ACK incorrectly)

b. Use the STC8A4K64S2A12 series G version chip as the slave, when the 
host completes reading the data and gives a NAK response signal, the 
MCU will not send the next data bit to the SDA bus (for the F version 
chip, whether the host returns ACK or NAK, MCU will wrongly send the 
next data bit to the SDA bus)

c. Using the STC8A4K64S2A12 series G version chip as the host, when an 
interference signal is generated on the I2C bus, the I2C communication 
will be interrupted. At this time, you only need to turn off the I2C 
total enable bit ENI2C (bit7 of the I2CCFG register), and then turn it 
on again. The I2C host can return to normal working state (when this 
happens, the F version chip must be re-powered on the MCU before it can 
be used)

Important Notes for STC8A4K64S2A12 Series G Version Chips 2

Corrected the problem that when setting the ninth bit (TB8) of the 
transmitted data in the mode 2 and mode 3 of serial port 1 in the F 
version chip, it needs to be set twice in a row to be effective, and 
the G version chip only needs to be set once.

Important Notes for STC8A4K64S2A12 Series G Version Chips 3

Fixed the problem that the following serial ports need to add pull-up 
resistors or set to strong push-pull mode when sending data. The 
following serial port sending pins of the G version chip do not need 
additional processing when sending data:

	a. TXD (P3.1), TXD_3 (P1.7)
	b. TXD2(P1.1), TXD2_2(P4.2)
	c. Note: At present, TXD_2 (P3.7) and TXD_4 (P4.4) still need to 
	add pull-up resistor or set to push-pull mode when sending data 
	as serial port

The interrupt request flag bit of the enhanced PWM is modified as 
follows: when an interrupt request occurs, the hardware automatically 
writes 1 to set the interrupt request flag, and the user can only 
write 0 to clear the interrupt request flag (the user program cannot 
write 1 to set the interrupt request flag. When the user writes 1, 
the interrupt request flag is set. considered invalid)

Important Notes for STC8A4K64S2A12 Series F Version Chips 1

When the serial port sending end of all serial ports (including serial 
port 1, serial port 2, serial port 3, and serial port 4) sends serial 
port data, the sending port needs to perform the following settings: 
(Choose one of the three methods)

	a. Set the I/O port to quasi-bidirectional port mode and turn on 
	the internal pull-up resistor
	b. Set the I/O port to quasi-bidirectional port mode and connect 
	an external 3~10K pull-up resistor
	c. Set the I/O port to strong push-pull mode

Important Notes for STC8A4K64S2A12 Series F Version Chips 2

In mode 2 and mode 3 of serial port 1, when setting the ninth bit (TB8) 
of the transmitted data, it needs to be set twice to be effective. 
Serial port 2, serial port 3 and serial port 4 do not have this problem.

Considerations for Emulating the STC8 Series Using an External Crystal

When using the STC8 series chip as the emulator for simulation, if you 
need to use an external crystal oscillator in the user system, you must 
set the frequency of the internal IRC to the same frequency as the 
external crystal oscillator when making the simulation chip.

(For example: if the user needs to use an external 11.0592MHz crystal 
oscillator in the system, when making a simulation chip, the frequency 
of the internal IRC needs to be changed from the default 24MHz to 
11.0592MHz, otherwise an error will occur during simulation)
